/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package autoclient;

// SCRIVI XML
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

 
// LEGGI XML
import org.w3c.dom.Node;  
import org.w3c.dom.NodeList;  

import javax.swing.JOptionPane;

/**
 *
 * @author salvatorenitopi
 */
public class Preferenze extends javax.swing.JFrame {

    private static String indirizzoSql = "";
    private static String usernameSql = "";
    private static String passwordSql = "";
    
    private static String indirizzoAuto = "";
    private static String portaAuto = "";

    
    
    public Preferenze() {
        initComponents();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width - 500, 10);
        
        leggiXML();
        
        txtSQLIndirizzo.setText (indirizzoSql);
        txtSQLUsername.setText (usernameSql);
        txtSQLPassword.setText (passwordSql);
        
        txtIpAuto.setText (indirizzoAuto);
        txtPortaAuto.setText (portaAuto);
        
        

        
        setTitle("Preferenze");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSQLPassword = new javax.swing.JPasswordField();
        lblParametriSQL = new javax.swing.JLabel();
        lblDbUsername = new javax.swing.JLabel();
        lblDbPassword = new javax.swing.JLabel();
        txtSQLUsername = new javax.swing.JTextField();
        txtSQLIndirizzo = new javax.swing.JTextField();
        lblDbIndirizzo = new javax.swing.JLabel();
        lblIpAuto = new javax.swing.JLabel();
        txtIpAuto = new javax.swing.JTextField();
        lblPortaAuto = new javax.swing.JLabel();
        txtPortaAuto = new javax.swing.JTextField();
        lblParametriAuto = new javax.swing.JLabel();
        btnChiud = new javax.swing.JButton();
        btnSalva = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblParametriSQL.setText("Parametri connessione server SQL:");

        lblDbUsername.setText("DBUsername:");

        lblDbPassword.setText("DBPassword:");

        lblDbIndirizzo.setText("Indirizzo");

        lblIpAuto.setText("IP:");

        lblPortaAuto.setText("Porta:");

        lblParametriAuto.setText("Parametri connessione server Auto:");

        btnChiud.setText("Chiudi");
        btnChiud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiudActionPerformed(evt);
            }
        });

        btnSalva.setText("Salva");
        btnSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(btnSalva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnChiud))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDbIndirizzo)
                        .addGap(61, 61, 61)
                        .addComponent(txtSQLIndirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblParametriSQL)
                    .addComponent(lblParametriAuto)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDbUsername)
                            .addComponent(lblDbPassword)
                            .addComponent(lblIpAuto)
                            .addComponent(lblPortaAuto))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSQLUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(txtSQLPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(txtIpAuto)
                            .addComponent(txtPortaAuto))))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblParametriSQL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSQLIndirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDbIndirizzo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDbUsername)
                    .addComponent(txtSQLUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDbPassword)
                    .addComponent(txtSQLPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(lblParametriAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIpAuto)
                    .addComponent(txtIpAuto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPortaAuto)
                    .addComponent(txtPortaAuto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChiud)
                    .addComponent(btnSalva)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChiudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiudActionPerformed
        this.setVisible (false);
    }//GEN-LAST:event_btnChiudActionPerformed

    private void btnSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvaActionPerformed
        creaXML();
        leggiXML();
        this.setVisible (false);
    }//GEN-LAST:event_btnSalvaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Preferenze.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Preferenze.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Preferenze.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Preferenze.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Preferenze().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiud;
    private javax.swing.JButton btnSalva;
    private javax.swing.JLabel lblDbIndirizzo;
    private javax.swing.JLabel lblDbPassword;
    private javax.swing.JLabel lblDbUsername;
    private javax.swing.JLabel lblIpAuto;
    private javax.swing.JLabel lblParametriAuto;
    private javax.swing.JLabel lblParametriSQL;
    private javax.swing.JLabel lblPortaAuto;
    private javax.swing.JTextField txtIpAuto;
    private javax.swing.JTextField txtPortaAuto;
    private javax.swing.JTextField txtSQLIndirizzo;
    private javax.swing.JPasswordField txtSQLPassword;
    private javax.swing.JTextField txtSQLUsername;
    // End of variables declaration//GEN-END:variables

    public static String getIndirizzoSql (){
        return indirizzoSql;
    }
    
    public static String getUsernameSql (){
        return usernameSql;
    }
            
    public static String getPasswordSql (){
        return passwordSql;
    }
            
    public static String getIndirizzoAuto (){
        return indirizzoAuto;
    }
            
    public static String getPortaAuto (){
        return portaAuto;
    }

    
    
    private void creaXML() { 
        
        try {  

            DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();  
            DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();  



            // Elemento ROOT  
            Document document = documentBuilder.newDocument();  
            Element rootPreferenze = document.createElement("Preferenze");  
            document.appendChild(rootPreferenze);  


            // Elemento Preferenze
            Element ServerSQL = document.createElement("ServerSQL");  
            rootPreferenze.appendChild(ServerSQL);  


            // Elemento Preferenze -> ServerSQL -> Indirizzo  
            Element indirizzoSQL = document.createElement("Indirizzo");  
            indirizzoSQL.appendChild(document.createTextNode(txtSQLIndirizzo.getText()));  
            ServerSQL.appendChild(indirizzoSQL); 


            // Elemento Preferenze -> ServerSQL -> Username
            Element usernameSQL = document.createElement("Username");  
            usernameSQL.appendChild(document.createTextNode(txtSQLUsername.getText()));  
            ServerSQL.appendChild(usernameSQL);  

            // Elemento Preferenze -> ServerSQL -> Password
            Element passwordSQL = document.createElement("Password");  
            passwordSQL.appendChild(document.createTextNode(String.valueOf(txtSQLPassword.getPassword())));  
            ServerSQL.appendChild(passwordSQL);  



            // Elemento Preferenze
            Element ServerAuto = document.createElement("ServerAuto");  
            rootPreferenze.appendChild(ServerAuto);

            // Elemento Preferenze -> ServerAuto -> Indirizzo 
            Element indirizzoAuto = document.createElement("Indirizzo");  
            indirizzoAuto.appendChild(document.createTextNode(txtIpAuto.getText()));  
            ServerAuto.appendChild(indirizzoAuto);

            // Elemento Preferenze -> ServerAuto -> PortaMSG  
            Element portMSGAuto = document.createElement("PortaAuto");  
            portMSGAuto.appendChild(document.createTextNode(txtPortaAuto.getText()));  
            ServerAuto.appendChild(portMSGAuto); 
            
            
            // Creazione e scrittura
            TransformerFactory transformerFactory = TransformerFactory.newInstance();  
            Transformer transformer = transformerFactory.newTransformer();  
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource domSource = new DOMSource(document);  
            StreamResult streamResult = new StreamResult(new File("Preferenze.xml"));  

            transformer.transform(domSource, streamResult);  
            
            System.out.println("FILE XML LETTO CON SUCCESSO");
            JOptionPane.showMessageDialog(this,"Preferenze salvate su: Preferenze.xml");

            } catch (ParserConfigurationException pce) {  
                JOptionPane.showMessageDialog(this,"Errore nel salvataggio delle preferenze.");
                System.out.println(pce);
            } catch (TransformerException tfe) {  
                JOptionPane.showMessageDialog(this,"Errore nel salvataggio delle preferenze.");
                System.out.println(tfe); 
            }  
    }

    
 
    public static void leggiXML() {  
        
        try {  
  
            File xmlFile = new File("Preferenze.xml"); 
            
            DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();  
            DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();  
            
            Document preferenze = documentBuilder.parse(xmlFile);  

            preferenze.getDocumentElement().normalize();  
            NodeList nodeList = preferenze.getElementsByTagName("Preferenze");  


             Node node = nodeList.item(0);


                        Element Preferenze = (Element) node;


                        indirizzoSql = Preferenze.getElementsByTagName("Indirizzo").item(0).getTextContent();

                        usernameSql = Preferenze.getElementsByTagName("Username").item(0).getTextContent();

                        passwordSql = Preferenze.getElementsByTagName("Password").item(0).getTextContent();

                        indirizzoAuto = Preferenze.getElementsByTagName("Indirizzo").item(1).getTextContent();

                        portaAuto = Preferenze.getElementsByTagName("PortaAuto").item(0).getTextContent();



            System.out.println("FILE XML LETTO CON SUCCESSO");
        } catch (Exception e) { 
            JOptionPane.showMessageDialog(null,"Errore nella lettura delle preferenze");
            System.out.println(e);  
        }  
    }  


}
 
